//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PolyhedraElementInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PolyhedraElementInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PolyhedraElementInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PolyhedraElementInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""37618013-e2c3-4c07-8546-e5366acb132f"",
            ""actions"": [
                {
                    ""name"": ""HorizontalRotation"",
                    ""type"": ""Value"",
                    ""id"": ""fc4006c5-bca8-41fb-bab3-c5503539f732"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VerticalRotation"",
                    ""type"": ""Button"",
                    ""id"": ""d8920dd0-3a02-4578-9df1-843f15d5e7fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""KeyBordXAxis"",
                    ""id"": ""a39ddd5c-dbe0-4c6c-83b7-0ebb7fed18ca"",
                    ""path"": ""1DAxis(whichSideWins=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalRotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c8858a6c-1282-4ae1-b286-69009865f290"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b57c43ca-efb2-42ad-a1cc-3287d4059788"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""MobileXAxis"",
                    ""id"": ""012ee60d-0ddb-44d4-b502-02faa1582b65"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalRotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2fa73415-b8f1-4295-8c13-8eddcf1a82fe"",
                    ""path"": ""<VirtualMouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""eed5ca85-6ce5-4b81-b9d2-c7b8301fd289"",
                    ""path"": ""<VirtualMouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""KeyBordYAxis"",
                    ""id"": ""db56faea-aef6-4b11-abb8-909551251e0c"",
                    ""path"": ""1DAxis(whichSideWins=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalRotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""05649469-cf11-4e93-8628-40c81a160b1a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""83c9d0f6-c871-4aa9-b161-3e975cff69bf"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""MobileYAxis"",
                    ""id"": ""de904ed9-a5b3-44fe-bd35-48102f4178b5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalRotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""84959e91-9de8-4ea6-8ea4-618713851eb3"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""72bbf7c4-e2a9-43ea-946a-0ac8e0687da1"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Toch"",
            ""id"": ""30188577-0e6f-44c0-9cfc-74abf20bc84a"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""8598f0b8-4c6e-4c44-ac7a-20b59e60777a"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ab0dd71-2473-4655-aa1d-29ea20f65895"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_HorizontalRotation = m_Movement.FindAction("HorizontalRotation", throwIfNotFound: true);
        m_Movement_VerticalRotation = m_Movement.FindAction("VerticalRotation", throwIfNotFound: true);
        // Toch
        m_Toch = asset.FindActionMap("Toch", throwIfNotFound: true);
        m_Toch_Rotation = m_Toch.FindAction("Rotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_HorizontalRotation;
    private readonly InputAction m_Movement_VerticalRotation;
    public struct MovementActions
    {
        private @PolyhedraElementInput m_Wrapper;
        public MovementActions(@PolyhedraElementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalRotation => m_Wrapper.m_Movement_HorizontalRotation;
        public InputAction @VerticalRotation => m_Wrapper.m_Movement_VerticalRotation;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @HorizontalRotation.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnHorizontalRotation;
                @HorizontalRotation.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnHorizontalRotation;
                @HorizontalRotation.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnHorizontalRotation;
                @VerticalRotation.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnVerticalRotation;
                @VerticalRotation.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnVerticalRotation;
                @VerticalRotation.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnVerticalRotation;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HorizontalRotation.started += instance.OnHorizontalRotation;
                @HorizontalRotation.performed += instance.OnHorizontalRotation;
                @HorizontalRotation.canceled += instance.OnHorizontalRotation;
                @VerticalRotation.started += instance.OnVerticalRotation;
                @VerticalRotation.performed += instance.OnVerticalRotation;
                @VerticalRotation.canceled += instance.OnVerticalRotation;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Toch
    private readonly InputActionMap m_Toch;
    private ITochActions m_TochActionsCallbackInterface;
    private readonly InputAction m_Toch_Rotation;
    public struct TochActions
    {
        private @PolyhedraElementInput m_Wrapper;
        public TochActions(@PolyhedraElementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_Toch_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_Toch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TochActions set) { return set.Get(); }
        public void SetCallbacks(ITochActions instance)
        {
            if (m_Wrapper.m_TochActionsCallbackInterface != null)
            {
                @Rotation.started -= m_Wrapper.m_TochActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_TochActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_TochActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_TochActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public TochActions @Toch => new TochActions(this);
    public interface IMovementActions
    {
        void OnHorizontalRotation(InputAction.CallbackContext context);
        void OnVerticalRotation(InputAction.CallbackContext context);
    }
    public interface ITochActions
    {
        void OnRotation(InputAction.CallbackContext context);
    }
}
